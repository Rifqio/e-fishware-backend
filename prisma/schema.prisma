generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id_user      String                 @id @default(uuid())
  email        String                 @unique
  employee_id  String                 @unique
  full_name    String
  password     String
  fcm_token    String?
  created_at   DateTime               @default(now())
  transactions FishStockTransaction[]
  promotions   Promotion[]            @relation("UserPromotions")

  @@map("users")
}

model Warehouse {
  id_warehouse Int         @id @default(autoincrement())
  name         String
  fishes       FishStock[]

  @@map("warehouse")
}

model Fish {
  id_fish   String      @id @unique
  type      String      @unique
  price     Int         @default(0)
  FishStock FishStock[]
  Promotion Promotion[]

  @@map("fish")
}

model FishStock {
  id_fish_stock String                 @id
  fish          Fish                   @relation(fields: [fish_type], references: [type], onDelete: Cascade)
  fish_type     String
  warehouse     Warehouse              @relation(fields: [warehouse_id], references: [id_warehouse])
  warehouse_id  Int
  quantity      Int
  total_price   Int                    @default(0)
  min_stock     Int
  max_stock     Int
  transactions  FishStockTransaction[]

  @@map("fish_stock")
}

model FishStockTransaction {
  id_fish_stock_transaction Int             @id @default(autoincrement())
  quantity                  Int
  transaction_type          TransactionType
  price                     Int             @default(0)
  created_at                DateTime        @default(now())
  updated_at                DateTime        @default(now())
  updated_by                String
  updated_by_id             User            @relation(fields: [updated_by], references: [id_user])
  FishStock                 FishStock?      @relation(fields: [fish_stock_id], references: [id_fish_stock])
  fish_stock_id             String?

  @@map("fish_stock_transaction")
}

model Promotion {
  id_promotion  String   @id @default(uuid())
  fish          Fish     @relation(fields: [fish_id], references: [id_fish])
  fish_id       String
  is_active     Boolean
  base_price    Int      @default(0)
  discount      Int      @default(0)
  start_date    DateTime
  end_date      DateTime
  created_at    DateTime @default(now())
  created_by_id User     @relation("UserPromotions", fields: [created_by], references: [id_user])
  created_by    String

  @@map("promotion")
}

view FishTransaction {
  id_fish_stock_transaction Int             @unique
  id_fish_stock             String
  fish_type                 String
  quantity                  Int
  price                     Int
  transaction_type          TransactionType
  warehouse_name            String
  warehouse_id              Int
  created_at                DateTime
  updated_at                DateTime
  updated_by                String

  @@map("fish_transaction")
}

enum TransactionType {
  IN
  OUT
}
